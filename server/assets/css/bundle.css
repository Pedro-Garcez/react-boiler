html {
  font-family: 'Archive', sans-serif;
  background-color: #fcfcfc;
  color: #e6dbdc;
}

body {
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@font-face {
  font-family: "archive";
  font-style: normal;
  font-weight: 300;
  src: url("/fonts/archive.eot");
  src: url("/fonts/archive.woff2") format("woff2"),
		url("/fonts/archive.woff") format("woff"),
		url("/fonts/archive.ttf") format("truetype");
}

.layout {
  background-color: #272527;
  max-width: 100rem;
  margin: auto;
}

/***
 * Variables
 * -
 */

:root {
  /*
	 * Theme
	 */
  /*
	 * Colors
	 */
  /*
	 * Texts
	 */
  /*
	 * Alert/Status colors
	 */
  /*
	 * Easings
	 */
}

/***
 * Media queries
 * -
 */

.card__flexbox {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  /* or space-around */
  box-sizing: border-box;
}

.card {
  position: relative;
  border: 1px solid #dddddd;
  -webkit-box-flex: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  width: 25%;
  margin: 5px;
  /* and that, will result in a 10px gap */
  cursor: pointer;
  overflow: hidden;
}

.card:hover > .card__bg {
  -webkit-transform: scale(1.4);
  -ms-transform: scale(1.4);
  -o-transform: scale(1.4);
  transform: scale(1.4);
}

.card__name {
  position: absolute;
  font-size: 2rem;
  bottom: 1rem;
  right: .3rem;
  z-index: 4;
}

.card__bg {
  max-width: 100%;
  -webkit-transition: all .4s;
  -o-transition: all .4s;
  transition: all .4s;
}

.footer {
  padding: 3rem;
  text-align: center;
  border-top: 1px solid #d22730;
  font-size: .75rem;
}

.header {
  display: table;
  text-align: center;
  width: 100%;
}

.header__logo-text {
  font-size: 5rem;
  vertical-align: middle;
  display: table-cell;
}

.header__logo-emphasis {
  color: #d22730;
}

/*
 * Searchbar
 * =========
 */

.searchbar {
  height: 1rem;
  text-align: center;
  padding-bottom: 5rem;
}

input {
  outline: none;
  background-color: transparent;
  border: none;
  color: #F8F8FF;
  text-shadow: 0px 0px 0px #F8F8FF;
  -webkit-text-fill-color: transparent;
  opacity: .7;
}

.searchbar__bar {
  margin: auto;
  width: 20rem;
  border-bottom: 1px solid #F8F8FF;
  padding: .5rem;
  font-size: 1.3rem;
}

/*# sourceMappingURL=data:application/json;base64, */